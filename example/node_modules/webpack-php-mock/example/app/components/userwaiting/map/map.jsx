import React from 'react';
import AoiControl from 'components/userwaittime/aoicontrol/aoicontrol';
import Areas from './areas.js';
import './map.less';

class Map extends React.Component {
    constructor (props) {
        super(props);
        this.state = {};
        this.areas = new Areas().setAoiMap(this);
    }
    componentDidMount () {
        var map = new BMap.Map(this.refs.map.getDOMNode(), {
            enableMapClick: false
        });
        map.centerAndZoom(new BMap.Point(116.404, 39.915), 11);
        map.addControl(new BMap.MapTypeControl());
        map.enableScrollWheelZoom();
        map.setCurrentCity("北京");

        this.map = map;
        this.aoicontrol = new AoiControl();
        this.map.addControl(this.aoicontrol);
        this.initEvent();
    }
    render () {
        return (
            <div id="mapview">
                <div className="map" ref="map">
                </div>
            </div>
        );
    }
    initEvent () {
        var me = this;
        me.aoicontrol.getEl().off();
        me.aoicontrol.getEl().on('click', '[data-node="resetViewBtn"]', function () {
            me.resetViewport();
        });
        me.aoicontrol.getEl().on('change', '[data-node="aois"]', function (e) {
            var $target = $(e.target);
            var aoiid = $target.val();
            me.clear();
            me.areas.run(aoiid);
        });
    }
    resetViewport () {
        var me = this;
        var points = [];
        for (var i in arguments) {
            if (arguments.hasOwnProperty(i)) {
                points = points.concat(arguments[i]);
            }
        }
        me.map.setViewport(points.length ? points : me.coords);
    }
    setRegion (coords) {
        this.coords = coords;
        return this;
    }
    setPoints (points) {
        this.points = points;
        return this;
    }
    draw () {
        var me = this;
        me.drawRegion();
        me.drawPoints();
    }
    drawRegion () {
        var me = this;
        var polygon = me.getPolygon(me.coords, {
            strokeColor: '#aaa',
            fillColor: '#bbb',
            strokeWeight: 2,
            strokeOpacity: 1,
            fillOpacity: 0.4,
            enableClicking: true
        });
        me.regionLayer = polygon;

        me.map.addOverlay(polygon);
        me.map.setViewport(me.points);
    }
    drawPoints () {
        var me = this;
        var pointsLayer = new BMap.PointCollection(me.points, {
            shape: BMap_Symbol_SHAPE_CLOCK,
            size: BMAP_POINT_SIZE_NORMAL,
            color: '#f00'
        });
        me.pointsLayer = pointsLayer;
        pointsLayer.addEventListener('click', me.clickPoint.bind(me));
        me.map.addOverlay(pointsLayer);
    }
    getPolygon (points, opt) {
        var polygon = new BMap.Polygon(points,
            {
                strokeColor: this.exist(opt, 'strokeColor', '#0B71F5'),
                fillColor: this.exist(opt, 'fillColor', '#0B71F5'),
                strokeWeight: this.exist(opt, 'strokeWeight', 2),
                strokeOpacity: this.exist(opt, 'strokeOpacity', 1),
                fillOpacity: this.exist(opt, 'fillOpacity', 0.3),
                enableClicking: this.exist(opt, 'enableClicking', true)
            });
        return polygon;
    }
    exist (opt, key, value) {
        return opt ? opt[key] ? opt[key] : value : value;
    }
    formatTime (t) {
        return Math.round(t * 100 / 60) / 100;
    }
    clickPoint (e) {
        var me = this;
        var pointDetail = e.point.detail;
        var lnglat = pointDetail.lng + '_'+pointDetail.lat;

        if (me.cubes[lnglat]) {
            this.map.removeOverlay(me.cubes[lnglat].polygon);
            this.map.removeOverlay(me.cubes[lnglat].label);
            me.cubes[lnglat] = null;
            return;
        }

        var weeks = pointDetail.weeks;
        var cube = {};

        var lableStr =
            (weeks.weekday ? '工作：' + me.formatTime(weeks.weekday.avg_wait_time) + '分钟 (样本： ' + weeks.weekday.sample_number + ')<br />' : '') +
            (weeks.weekend ? '周末：' + me.formatTime(weeks.weekend.avg_wait_time) + '分钟 (样本： ' + weeks.weekday.sample_number + ')<br />' : '');

        var timeLabel = new BMap.Label(lableStr);
        var points = [];

        points.push(new BMap.Point(pointDetail.blPoint[0], pointDetail.blPoint[1]));
        points.push(new BMap.Point(pointDetail.trPoint[0], pointDetail.blPoint[1]));
        points.push(new BMap.Point(pointDetail.trPoint[0], pointDetail.trPoint[1]));
        points.push(new BMap.Point(pointDetail.blPoint[0], pointDetail.trPoint[1]));

        var polygon = this.getPolygon(points);
        cube.polygon = polygon;
        me.map.addOverlay(polygon);
        me.resetViewport(points);

        timeLabel.setStyle({
            backgroundColor: 'rgba(0,0,0,0)',
            border: 'none',
            fontSize: '12px',
            color: '#f00'
        });
        timeLabel.setPosition(new BMap.Point(pointDetail.lng, pointDetail.lat));
        timeLabel.setOffset(new BMap.Size(-60, 10));
        cube.label = timeLabel;
        this.map.addOverlay(timeLabel);
        me.cubes[lnglat] = cube;
    }
    clear () {
        this.clearRegion();
        this.clearPoints();
        this.clearCubes();
    }
    clearPoints () {
        var me = this;
        me.map.removeOverlay(me.pointsLayer);
        me.points = null;
        me.pointsLayer = null;
    }
    clearRegion () {
        var me = this;
        me.map.removeOverlay(me.regionLayer);
        me.coords = null;
        me.regionLayer = null;
    }
    clearCubes () {
        var me = this;
        for (var i in me.cubes) {
            if (me.cubes.hasOwnProperty(i)) {
                me.cubes[i] && me.map.removeOverlay(me.cubes[i].polygon);
                me.cubes[i] && me.map.removeOverlay(me.cubes[i].label);
            }
        }
        me.cubes = {};
    }
}

export default Map;