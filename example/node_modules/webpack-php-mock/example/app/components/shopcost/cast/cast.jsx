import React from 'react';
import shopImg from 'imgs/marker_shop.png';
import userImg from 'imgs/marker_user.png';
import userNotice from 'imgs/marker_user_notice.png';
import userWarning from 'imgs/marker_user_warning.png';
import userDanger from 'imgs/marker_user_danger.png';
import userFatal from 'imgs/marker_user_fatal.png';
import userinfoEJS from './snippet/userinfo.ejs';
import './snippet/userinfo.less';
import './cast.less';

class CostCast extends React.Component {
    data = '';
    resetArr = [];
    userMarkers = [];
    markerHandlers = {};
    imgs = {
        0: userImg,
        1: userNotice,
        2: userWarning,
        3: userDanger,
        4: userFatal
    };

    shouldComponentUpdate(nextProps, nextState) {
        return this.props.castData !== nextProps.castData;
    }

    componentDidMount() {
        var map = new BMap.Map(this.refs.map.getDOMNode(), {
            enableMapClick: false
        });

        this.map = this.initMap(map);
    }

    initMap(map) {
        map.centerAndZoom(new BMap.Point(116.404, 39.915), 11);
        map.addControl(new BMap.MapTypeControl());
        map.enableScrollWheelZoom();
        map.setCurrentCity("北京");
        map.addControl(new BMap.NavigationControl());
        map.addControl(new BMap.ScaleControl());

        return map;
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps && (nextProps.shopid !== this.shopid)) {
            this.triggerMap(nextProps.shopid);
            this.shopid = nextProps.shopid;
        }
        if (nextProps && !~nextProps.shopid) {
            this.clear();
            this.initMap(this.map);
        }
    }

    componentDidUpdate() {
        var data = this.props.data;

        if (data && data !== this.data) {
            this.data = data;
            this.renderMap(this.data);
        }
    }

    render() {
        return (
            <div className="cast">
                <div className="map" ref="map">
                </div>
            </div>
        );
    }

    triggerMap(shopid) {
        if (shopid && ~shopid) {
            CostCastAction.mapDataFetch(shopid, this.props);
        }
    }

    renderMap(data) {
        this.clear();
        this.renderRegion(data);
        this.renderOrders(data);
        this.renderShop(data);
        this.resetViewport();
    }

    renderShop(data) {
        var loca = new BMap.Point(data.longitude, data.latitude);
        var shopMark = new BMap.Marker(loca);
        var iconSize = new BMap.Size(60, 76);
        var shopIcon = new BMap.Icon(shopImg, iconSize, {anchor: new BMap.Size(30, 76)});
        shopIcon.setImageSize(iconSize);
        shopMark.setIcon(shopIcon);
        this.shopCoord = loca;
        this.resetArr.push(this.shopCoord);
        this.map.addOverlay(shopMark);
    }

    renderRegion(data) {
        var me = this;
        var region = data.takeout_deliver_regions;
        region.forEach(function (item, idx, arr) {
            var coords = [];
            item.forEach(function (im, ix, ar) {
                coords.push(new BMap.Point(im.longitude, im.latitude));
            });
            me.resetArr = me.resetArr.concat(coords);
            me.drawRegion(coords);
        });
    }

    renderOrders(data) {
        var me = this;
        var orders = data.orders;
        var coords = [];
        var markers = [];

        orders.forEach(function (item, idx, arr) {
            var cs = item.user_coord.split('_');
            var pt = new BMap.Point(cs[0], cs[1]);
            var mk = new BMap.Marker(pt);
            var iconSize = new BMap.Size(40, 49);
            var cost = (item.time_cost / 60 * 22).toFixed(2);
            var level = cost / item.income;

            level = Math.floor(Math.min(4, level));

            var img = me.imgs[level];

            var userIcon = new BMap.Icon(img, iconSize, {anchor: new BMap.Size(20, 49)});
            // var mk = new BMapLib.TextIconOverlay(pt, item.time_cost);
            userIcon.setImageSize(iconSize);
            mk.setIcon(userIcon);
            mk.wl_costTime = item.time_cost;
            item.cost_money = cost;
            mk.wl_info = item;
            coords.push(pt);
            markers.push(mk);
            me.addHandler(mk, me.clickUserInfo);
            me.map.addOverlay(mk);
        });

        me.resetArr = me.resetArr.concat(coords);
        me.markerCluster = new BMapLib.MarkerClusterer(me.map, {markers: markers});
        me.userMarkers = markers;
    }
    
    resetViewport() {
        this.map.setCenter(this.shopCoord);
        this.map.setViewport(this.resetArr);
    }

    drawRegion(coords) {
        var me = this;
        var polygon = me.getPolygon(coords, {
            strokeColor: '#aaa',
            fillColor: '#bbb',
            strokeWeight: 2,
            strokeOpacity: 1,
            fillOpacity: 0.4,
            enableClicking: true
        });
        me.regionLayer = polygon;

        me.map.addOverlay(polygon);
    }

    clear() {
        this.resetArr = [];
        for (var i = 0, l = this.userMarkers.length; i < l; i++) {
            this.removeHandler(this.userMarkers[i]);
        }
        this.userMarkers = [];

        this.map.clearOverlays();
        this.markerCluster && this.markerCluster.clearMarkers();
    }

    getPolygon(points, opt) {
        var polygon = new BMap.Polygon(points,
            {
                strokeColor: this.exist(opt, 'strokeColor', '#0B71F5'),
                fillColor: this.exist(opt, 'fillColor', '#0B71F5'),
                strokeWeight: this.exist(opt, 'strokeWeight', 2),
                strokeOpacity: this.exist(opt, 'strokeOpacity', 1),
                fillOpacity: this.exist(opt, 'fillOpacity', 0.3),
                enableClicking: this.exist(opt, 'enableClicking', true)
            });
        return polygon;
    }

    exist(opt, key, value) {
        return opt ? opt[key] ? opt[key] : value : value;
    }

    addHandler(marker, handler) {
        if (!this.markerHandlers[marker]) {
            this.markerHandlers[marker] = [handler];
        }
        else {
            this.markerHandlers[marker].push(handler);
        }

        marker.addEventListener('click', handler);
    }

    removeHandler(marker) {
        var handlers = this.markerHandlers[marker];

        handlers && handlers.forEach(function (item, idx, arr) {
            marker.removeEventListener('click', item)
        });

        this.markerHandlers = [];
    }

    clickUserInfo = (evt) =>{
        var marker = evt.target;
        var info = marker.wl_info;

        var infoWin = new BMap.InfoWindow(userinfoEJS(info));
        marker.openInfoWindow(infoWin);
    }

    openUserInfo = (data) => {

    }
}

export default CostCast;