import React from 'react';
import connectToStores from 'alt/utils/connectToStores';
import AoiNav from 'components/common/aoinav/AoiNav';
import ButtonNav from 'components/common/buttonnav/ButtonNav';
import InfoList from 'components/common/infolist/InfoList';
import WaitingInfo from 'components/userwaiting/info/Info';
import WaitingList from 'components/userwaiting/list/List';
import Waiting from 'components/userwaiting/waiting/waiting';
import WaitingAction from 'actions/userwaiting/WaitingAction';
import WaitingStore from 'stores/userwaiting/WaitingStore';
import './userwaiting.less';

@connectToStores
class UserWaiting extends React.Component {
    constructor(props, context) {
        super(props);
        this.state = {
        };
    }

    render() {
        return (
            <div id="user-waiting" className="info-map" ref="userWaiting"
                onClick={this.clickListInfo}
            >
                <div className="info-zone">
                    <AoiNav onAoiChange={this.onAoiChange}></AoiNav>
                    <InfoList ref="listInfo"
                        list={WaitingList} info={WaitingInfo}
                        detail={this.state.detail}
                    >
                    </InfoList>
                </div>
                <div className="map-zone">
                    <Waiting ref="waitingCast" {...this.props}></Waiting>
                </div>
            </div>
        );
    }

    componentDidMount() {
        WaitingAction.fetchInfo({}, this);
    }

    static getStores(props) {
        return [WaitingStore];
    }

    static getPropsFromStores(props) {
        return WaitingStore.getState();
    }

    componentWillUpdate(nextProps, nextState) {
        var type = nextProps.type;
        var data;

        switch(type) {
            case 'list':
                data = nextProps.listData
                this.refs.listInfo.setListData(data);
                break;
            case 'info':
                data = nextProps.infoData;
                this.refs.listInfo.setInfoData(data);
            case 'map':
                data = nextProps.castData;
                this.refs.waitingCast.renderMap(data);
                break;
            default:
                break;
        }
    }

    componentDidUpdate(prevProps, prevState) {
        var type = this.props.type || 'info';

        if (this.state.detail) {
            this.refs.waitingCast.hideScale();
        }
        else {
            this.refs.waitingCast.showScale();
        }

        switch(type) {
            case 'list':
            case 'info':
                this.refs.listInfo.switchTo(this.props.type);
                break;
            default:
                break;
        }
    }

    clickListInfo = (evt) => {
        var node = evt.target.dataset.node;

        switch (node) {
            case 'link':
                var to = evt.target.dataset.to;
                this.refs.listInfo.switchTo(to);
                if ('list' === to) {
                    WaitingAction.fetchList({}, this);
                }
                else {
                    WaitingAction.fetchInfo({}, this);
                }
                break;
            case 'map':
                var aoiid = evt.target.dataset.aoiid;
                WaitingAction.fetchCast({aoiid: aoiid}, this);
                break;
            case 'detail':
                this.toggleDetail();
                break;
        }
    }

    onAoiChange = (evt) => {
        var aoiid = evt.target.value;
        WaitingAction.fetchCast({aoiid: aoiid}, this);
        WaitingAction.fetchInfo({aoiid: aoiid}, this);
    }

    toggleDetail() {
        if (this.state.detail) {
            this.closeDetail();
        }
        else {
            this.showDetail();
        }
    }

    showDetail() {
        $(this.refs.userWaiting.getDOMNode()).removeClass('info-map').addClass('info-only');
        this.setState({detail: true});
    }

    closeDetail() {
        $(this.refs.userWaiting.getDOMNode()).addClass('info-map').removeClass('info-only');
        this.setState({detail: false});
    }

}

export default UserWaiting;