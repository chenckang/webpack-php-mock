import React from 'react';
import connectToStores from 'alt/utils/connectToStores';
import CostInfo from 'components/shopcost/info/info';
import CostCast from 'components/shopcost/cast/cast';
import CostList from 'components/shopcost/list/list';
import InfoList from 'components/common/infolist/InfoList';
import CostAction from 'actions/shopcost/CostAction';
import CostStore from 'stores/shopcost/CostStore';
import AoiNav from 'components/common/aoinav/AoiNav';
import ButtonNav from 'components/common/buttonnav/ButtonNav';
import 'js/map/TextIconOverlay.js';
import 'js/map/MarkerClusterer.js';
import './shopcost.less';

@connectToStores
class ShopCost extends React.Component {
    constructor(props, context) {
        super(props);
        this.state = {};
    }

    render () {
        return (
            <div id="shop-cost" className="info-map" ref="shopCost"
                onClick={this.clickListInfo}
            >
                <div className="info-zone">
                    <AoiNav onAoiChange={this.onAoiChange}></AoiNav>
                    <ButtonNav tab={this.state.tab} nav={this.state.nav}></ButtonNav>
                    <InfoList ref="listInfo"
                        list={CostList} info={CostInfo}
                        detail={this.state.detail}
                        {...this.state}
                    >
                    </InfoList>
                </div>
                <div className="map-zone">
                    <CostCast ref="costCast" {...this.props}></CostCast>
                </div>
            </div>
        );
    }

    componentWillUpdate(nextProps, nextState) {
        var type = nextProps.type;
        var data;

        switch(type) {
            case 'list':
                data = nextProps.listData;
                this.refs.listInfo.setListData(data);
                break;
            case 'info':
                data = nextProps.infoData;
                this.refs.listInfo.setInfoData(data);
            default:
                break;
        }
    }

    componentDidUpdate(prevProps, prevState) {
        var type = this.props.type || 'info';

        switch(type) {
            case 'list':
            case 'info':
                this.refs.listInfo.switchTo(this.props.type);
                break;
            case 'map':
                this.refs.costCast.renderMap(this.props.castData.data);
                break;
            default:
                break;
        }
    }

    componentDidMount() {
        CostAction.fetchInfo({}, this);
    }

    componentWillReceiveProps(nextProps) {
        var type = nextProps.type;
        if ('list' === type || 'info' === type) {
            this.setState({tab: nextProps.type});
        }
        if ('map' === type) {
            this.setState({castData: nextProps.castData});
        }
    }

    static getStores(props) {
        return [CostStore];
    }

    static getPropsFromStores(props) {
        return CostStore.getState();
    }

    clickListInfo = (evt) => {
        var node = evt.target.dataset.node;
        var aoiid= this.aoiid;

        switch (node) {
            case 'link':
                var to = evt.target.dataset.to;
                var extra = evt.target.dataset.param;
                if ('list' === to) {
                    CostAction.fetchList({extra: extra, aoiid: aoiid}, this);
                }
                else {
                    CostAction.fetchInfo({aoiid: aoiid}, this);
                }
                break;
            case 'map':
                var shopId = evt.target.dataset.param;
                CostAction.fetchCast({shopid: shopId}, this);
                break;
            case 'detail':
                this.toggleDetail();
                break;
            default:
                this.to = null;
                break;
        }
    }

    onAoiChange = (evt) => {
        var aoiid = evt.target.value;
        this.aoiid = aoiid;
        if (aoiid) {
            this.setState({nav: true});
        }
        else {
            this.setState({nav: false});
        }
        this.setState({tab: 'info'});
        CostAction.fetchInfo({aoiid: aoiid}, this);
    }

    toggleDetail() {
        if (this.state.detail) {
            this.closeDetail();
        }
        else {
            this.showDetail();
        }
    }

    showDetail() {
        $(this.refs.shopCost.getDOMNode()).removeClass('info-map').addClass('info-only');
        this.setState({detail: true});
    }

    closeDetail() {
        $(this.refs.shopCost.getDOMNode()).addClass('info-map').removeClass('info-only');
        this.setState({detail: false});
    }
}

ShopCost.contextTypes = {
    router: React.PropTypes.func.isRequired
};

export default ShopCost;