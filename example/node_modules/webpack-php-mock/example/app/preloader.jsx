/**
 * @file 预加载组件，用于路由切换时统一分发业务逻辑
 * @author chenkang01
 */

import React from 'react';
import Loading from 'components/common/loading/loading';
import {RouteHandler} from 'react-router';

class PreLoader extends React.Component {
    widgets = {};

    constructor(props, context) {
        super(props);
        this.state = {};
    }

    /**
     * 按组件名称加载组件，并在完成加载后刷新PreLoader组件，所加载组件位于widgets目录下
     * @param  {String} name 组件名称，位于目录widgets下，组件目录结构需满足一定的规范
     */
    loadWidget(name = 'shopcost') {
        if (this.widgets[name]) {
            return (this.constructor.loadedComponent = this.widgets[name]);
        }

        var widget = require('bundle?lazy!widgets/' + name + '/' + name);

        widget(function (wdg) {
            this.constructor.loadedComponent = this.widgets[name] = wdg;
            this.forceUpdate();
        }.bind(this));
    }

    componentDidMount() {
        var name = this.props.params.widget;
        this.loadWidget(name);
    }

    /**
     * 当路由切换时，刷新组件。
     * @param  {Object} nextProps 将要更新的属性，其中包含路由信息
     */
    componentWillReceiveProps(nextProps) {
        var name = nextProps.params.widget;
        this.loadWidget(name);
    }

    render() {
        var Widget = this.constructor.loadedComponent;

        if (Widget) {
            return (
                <Widget {...this.props}>
                </Widget>
            );
        }

        return (
            <Loading show="true"></Loading>
        );
    }

}

export default PreLoader;